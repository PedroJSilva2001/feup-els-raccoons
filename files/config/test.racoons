version "1.0"

a = 2.0
b = false
c = a

source src1 from (
  "./f*/*.json",
  "./g/single.json"
)

nft n1 of src1 (
    data data1 [1] -> "dddd",
    [1],


	/*all-container,
	filePath -> "File",
	"nft" [2],
	[2] -> "test",
	config[3],
	config[2] -> "Peter",
    config "secretVar",
    config2 secretVar2 -> "Secret2",
    "version" -> "Version",
    except ( test ) -> "test %s",
    data each (
        student,
        finalGrade,
    ),*/
)

// test Ola pedro


exporter coolHtmlExporter of html (
    filename: "cool table"
    path: "/mnt/c/"
    title: "Cool Table"
    style: "table, th, td { border: 1px solid black; }"
    exportFullHtml: true
    //separator: ";" // error
)

exporter coolTsvExporter of tsv (
    filename: "cool table"
    path: "/mnt/c/"
    endOfLine: "\r\n"
    //separator: ";" // error
)

exporter coolMarkdownExporter of markdown (
    filename: "cool table"
    path: "/mnt/c/"
)

exporter coolLatexExporter of latex (
    filename: "cool table"
    path: "/mnt/c/"
)

1 == 1
1 == 1.0
1.0 == 1
1.0 == 1.0
1 != 1
true && false
false || false
1 < 1

//coolTable =
//        table(n1)
//          -> where(col("coolCol") <= a && col("coolCol") >= 1.0)
//          -> concatHorizontal(table(n1), table())

//coolTable -> export(coolExporter)
//table(n1)
//  -> concatHorizontal(table(n1), table())
//  -> export(coolExporter)

exporter coolExporter of csv (
    filename: "cool.csv"
    path: "./build/"
)

exporter coolExporter2 of csv (
    filename: "cool2.csv"
    path: "./build/"
)

source src2 from (
    "./files/yaml/students*.yaml",
)

nft n2 of src2 (
    file -> "File",
    course -> "Course",
    students each (
        studID -> "Student ID",
        grades each -> "Grades",
    ),
)

//table2 = table(n2) -> select("File") -> concatHorizontal(table(n2) -> reject("File"))

//table(n2) -> select("File") -> concatHorizontal(table(n2) -> reject("File")) -> export(coolExporter)
//table(n2) -> argMin("Grades") -> export(coolExporter)
//table2 -> select("File") -> export(coolExporter)

table(n2) -> export(coolExporter)
d = col("Grades") == col("Grades")
table2 = table(n2)
coolTable =
        table2
          -> where(col("Grades") >= (table2 -> max("Grades")))

coolTable -> export(coolExporter2)
values = table2 -> max("Grades", "Course")

table2 -> where(col("Grades") == get (values, "Grades")) -> export(coolExporter)